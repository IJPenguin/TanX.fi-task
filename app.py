import pandas as pd
from typing import Any, Union

def read_data(file_path: str) -> pd.DataFrame:
    """
    Reads the data from a CSV file.

    Parameters:
    file_path (str): The path to the CSV file.

    Returns:
    pd.DataFrame: The data read from the CSV file.
    """
    try:
        data = pd.read_csv(file_path)
    except FileNotFoundError as e:
        raise FileNotFoundError(f"The file {file_path} was not found.") from e
    except pd.errors.EmptyDataError as e:
        raise ValueError(f"The file {file_path} is empty.") from e
    except pd.errors.ParserError as e:
        raise ValueError(f"Error parsing the file {file_path}.") from e
    return data

def compute_total_revenue_per_month(data: pd.DataFrame) -> pd.Series:
    """
    Computes the total revenue generated by the online store for each month.

    Parameters:
    data (pd.DataFrame): The input data.

    Returns:
    pd.Series: Total revenue per month.
    """
    data['order_date'] = pd.to_datetime(data['order_date'])
    data['month'] = data['order_date'].dt.to_period('M')
    revenue_per_month = data.groupby('month')['product_price'].sum()
    return revenue_per_month

def compute_total_revenue_per_product(data: pd.DataFrame) -> pd.Series:
    """
    Computes the total revenue generated by each product.

    Parameters:
    data (pd.DataFrame): The input data.

    Returns:
    pd.Series: Total revenue per product.
    """
    revenue_per_product = data.groupby('product_name')['product_price'].sum()
    return revenue_per_product

def compute_total_revenue_per_customer(data: pd.DataFrame) -> pd.Series:
    """
    Computes the total revenue generated by each customer.

    Parameters:
    data (pd.DataFrame): The input data.

    Returns:
    pd.Series: Total revenue per customer.
    """
    revenue_per_customer = data.groupby('customer_id')['product_price'].sum()
    return revenue_per_customer

def top_10_customers_by_revenue(data: pd.DataFrame) -> pd.Series:
    """
    Identifies the top 10 customers by revenue generated.

    Parameters:
    data (pd.DataFrame): The input data.

    Returns:
    pd.Series: Top 10 customers by revenue.
    """
    revenue_per_customer = compute_total_revenue_per_customer(data)
    top_customers = revenue_per_customer.nlargest(10)
    return top_customers

def main(file_path: str) -> None:
    """
    Main function to execute the tasks.

    Parameters:
    file_path (str): The path to the CSV file.
    """
    data = read_data(file_path)
    print("Total revenue per month:")
    print(compute_total_revenue_per_month(data))
    print("\nTotal revenue per product:")
    print(compute_total_revenue_per_product(data))
    print("\nTotal revenue per customer:")
    print(compute_total_revenue_per_customer(data))
    print("\nTop 10 customers by revenue:")
    print(top_10_customers_by_revenue(data))

if __name__ == "__main__":
    main('orders.csv')